// Tests of the Iterator object

var obj2 = [ 1, 2, 3 ];

class IteratorProto {
    var _obj;
    var _index;
    constructor(obj) {
        _obj = obj; 
        _index = 0;
        
        meta = {
            get : function(k) {
                if (k == "value") return done ? null : _obj[_index];
                if (k == "done") return _index >= _obj.length;
                return null;
            },
            set : function(k, v) {
                if (k == "value" && !done) _obj[_index] = v;
            }
        };
    }
    
    function next() { if (!done) ++_index; }
};

obj2.iterator = IteratorProto;

printf("0) Hand crafted iterator\n");
printf("    Original array: %s\n", obj2);
for (var it : obj2) {
	it.value *= 2;
}
printf("    Array doubled : %s\n", obj2);

var obj = [ 1, 2, 3 ];

printf("\n1) Double array object\n");
printf("    Original array: %s\n", obj);
for (var it : obj) {
	it.value *= 2;
}
printf("    Array doubled : %s\n", obj);

var n = 0;
for (var it : obj) {
	n += it.value;
}

printf("\n2)  Iterate array using implicit iteration: total (s/b) 12) = %d\n", n);

var n = 0;
for (var it = new Iterator(obj); !it.end; it.next()) {
	n += it.value;
}

printf("2a) Same test using Iterator object: total (s/b) 12) = %d\n", n);

var n = 0;
var it;
for (it = new Iterator(obj); !it.end; it.next()) {
	n += it.value;
}

printf("2b) Same test with iterator value defined outside for loop: total (s/b) 12) = %d\n", n);
